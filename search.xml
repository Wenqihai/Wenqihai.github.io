<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[理解设计模式——观察者模式]]></title>
      <url>https://wenqihai.github.io/2017/04/20/Observer-Patterns/</url>
      <content type="html"><![CDATA[<p>观察者模式（observer pattern），可以用三个字概括：一对多。其实我个人更喜欢称之为“发布/订阅模式”，理由下面会讲到。具体地说，<strong>观察者模式定义了对象之间地一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</strong><br>观察者模式涉及两类对象，首先是“主题”（Subject),也就是消息的产生者，被“观察”的对象；其次就是“观察者”（Observer），观察者可以有多个，和“主题”形成一对多的关系，只要“主题”有变化，所有与之相关的观察者，都会得到通知。以下是相关接口：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IObserver</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="keyword">string</span> msg</span>)</span>;<span class="comment">//主题更新时，会调用这个方法</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISubject</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Subscribe</span>(<span class="params">IObserver o</span>)</span>;<span class="comment">//订阅主题</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Unsubscribe</span>(<span class="params">IObserver o</span>)</span>;<span class="comment">//取消订阅</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>观察者模式的目的在于尽量使交互对象之间松耦合，当主题的内部逻辑改变后，观察者不受影响；而观察者的添加、减少、收到通知后如何处理，也不影响主题。<br>下面用红绿灯为例，做一个简陋的实现：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TrafficLight</span> : <span class="title">ISubject</span></div><div class="line"> &#123;</div><div class="line">     List&lt;IObserver&gt; observerList = <span class="keyword">new</span> List&lt;IObserver&gt;();<span class="comment">//观察者列表</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Subscribe</span>(<span class="params">IObserver o</span>)</span></div><div class="line">     &#123;</div><div class="line">         observerList.Add(o);</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Unsubscribe</span>(<span class="params">IObserver o</span>)</span></div><div class="line">     &#123;</div><div class="line">         observerList.Remove(o);</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">     &#123;</div><div class="line">         System.Timers.Timer timer = <span class="keyword">new</span> System.Timers.Timer();<span class="comment">//启动一个定时器，30秒更新一下红绿灯状态</span></div><div class="line">         timer.Interval = <span class="number">30000</span>;</div><div class="line">         timer.Elapsed += Timer_Elapsed;</div><div class="line">         timer.Start();</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">bool</span> red;</div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Timer_Elapsed</span>(<span class="params"><span class="keyword">object</span> sender, System.Timers.ElapsedEventArgs e</span>)</span></div><div class="line">     &#123;</div><div class="line">         red = !red;</div><div class="line">         <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> observerList) <span class="comment">//通知所有车辆，信号灯变了</span></div><div class="line">         &#123;</div><div class="line">             item.Update(red ? <span class="string">"红"</span> : <span class="string">"绿"</span>);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Car</span> : <span class="title">IObserver</span></div><div class="line"> &#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="keyword">string</span> msg</span>)</span></div><div class="line">     &#123;</div><div class="line">         <span class="keyword">if</span> (msg == <span class="string">"红"</span>)</div><div class="line">             Stop();</div><div class="line">         <span class="function"><span class="keyword">else</span></span></div><div class="line">             <span class="title">Go</span>(<span class="params"></span>);</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Stop</span>(<span class="params"></span>)</span></div><div class="line">     &#123;</div><div class="line">         Console.WriteLine(<span class="string">"Wating..."</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Go</span>(<span class="params"></span>)</span></div><div class="line">     &#123;</div><div class="line">         Console.WriteLine(<span class="string">"Go!"</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>写完才发现红绿灯这个例子和教科书上的不太一致，因为这个场景下，车在路口前订阅信号灯消息，通过后即可立刻取消。大体意思还是一样的。<br>以上代码是教科书式的观察者模式，实际上，.NET框架中，观察者模式的思想随处可见：事件机制。一个事件就相当于一个发布者，事件的绑定与解绑，就相当于观察者模式的订阅与取消。当然，事件并不等同与观察者模式，只是.NET的事件机制，能轻易实现观察者模式：事件的触发者与事件的订阅者相互保持独立，一个事件可以被多次订阅。<br>之所以前面提到，我更喜欢称观察者模式为订阅/发布模式，是因为<strong>从线程以及方法调用的角度来讲，“观察” = 轮询，“通知” = 回调。从定义可以看出，观察者模式应该属于“推”，即通过订阅操作注册回调方法，消息发布时，“发布者”调用回调方法，将消息“推”到“订阅者”。</strong>所以，本人窃以为，叫做“订阅/发布”模式，理解起来更准确。<br>这个模式在.NET中，有以下几点值得注意的（其实也就是事件的坑）：</p>
<ul>
<li>事件是由哪一个线程触发的。winform里头，后台线程是不能直接操作UI对象的，所以这个问题几乎玩过winform的人都会遇到。</li>
<li>事件可以用 += 符号绑定多个方法，触发时逐个调用，如果中间一个方法阻塞，则该执行线程阻塞，给人的感觉就是，订阅者影响了发布者，和设计逻辑严重不符；如果中间一个方法异常，则后面的方法不会被调用，可怕的是，如果你用一个Task来触发事件，则异常消息很可能消失在异次元。<br>刚刚写上面的例子的时候，发现.NET类库中，已经设计好了观察者模式的接口，模式比教科书式的还要完美一些，虽然自己没用过，这里还是贴一下留作纪念:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">  // 摘要:</div><div class="line">  //     提供用于接收基于推送的通知的机制。</div><div class="line">  //</div><div class="line">  // 类型参数:</div><div class="line">  //   T:</div><div class="line">  //     提供通知信息的对象。</div><div class="line">  public interface IObserver&lt;in T&gt;</div><div class="line">  &#123;</div><div class="line">      //</div><div class="line">      // 摘要:</div><div class="line">      //     通知观察者，提供程序已完成发送基于推送的通知。</div><div class="line">      void OnCompleted();</div><div class="line">      //</div><div class="line">      // 摘要:</div><div class="line">      //     通知观察者，提供程序遇到错误情况。</div><div class="line">      //</div><div class="line">      // 参数:</div><div class="line">      //   error:</div><div class="line">      //     一个提供有关错误的附加信息的对象。</div><div class="line">      void OnError(Exception error);</div><div class="line">      //</div><div class="line">      // 摘要:</div><div class="line">      //     向观察者提供新数据。</div><div class="line">      //</div><div class="line">      // 参数:</div><div class="line">      //   value:</div><div class="line">      //     当前的通知信息。</div><div class="line">      void OnNext(T value);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">   //</div><div class="line">  // 摘要:</div><div class="line">  //     定义基于推送的通知的提供程序。</div><div class="line">  //</div><div class="line">  // 类型参数:</div><div class="line">  //   T:</div><div class="line">  //     提供通知信息的对象。</div><div class="line">  public interface IObservable&lt;out T&gt;</div><div class="line">  &#123;</div><div class="line">      //</div><div class="line">      // 摘要:</div><div class="line">      //     通知提供程序：某观察程序将要接收通知。</div><div class="line">      //</div><div class="line">      // 参数:</div><div class="line">      //   observer:</div><div class="line">      //     要接收通知的对象。</div><div class="line">      //</div><div class="line">      // 返回结果:</div><div class="line">      //     使资源释放的观察程序的接口。</div><div class="line">      IDisposable Subscribe(IObserver&lt;T&gt; observer);</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Patterns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解设计模式——单件模式]]></title>
      <url>https://wenqihai.github.io/2017/03/16/Singleton-Patterns/</url>
      <content type="html"><![CDATA[<p>单件模式（Singleton Pattern)相当好理解，直接上定义：<strong>单件模式确保一个类只有一个实例，并提供一个全局的访问点。</strong><br>实现单件模式的关键在于构造函数设置为私有，然后通过一个公开的静态方法获取类的实例。<br>实现方法及面对的问题有很多，在<a href="http://csharpindepth.com/articles/general/singleton.aspx" target="_blank" rel="external">《Implementing the Singleton Pattern in C#》</a> 中有很全的介绍，这里只贴一下最佳实践：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Singleton</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;Singleton&gt; lazy =</div><div class="line">        <span class="keyword">new</span> Lazy&lt;Singleton&gt;(() =&gt; <span class="keyword">new</span> Singleton());</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton Instance &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> lazy.Value; &#125; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>单件模式的主要问题无非是线程安全及延迟加载，这个写法利用Lazy类型，既达到了线程安全的目的，又实现了延迟加载，代码也比double-check locking方式简洁，比nested classes方式好理解。<br>主要疑问：  </p>
<ol>
<li><p><strong>单件模式和静态类有什么区别？</strong><br> 其实说到单实例，我第一个想到的是定义一个静态类，然后让所有将所有方法和属性都定义为静态的。因为静态类无法实例化，所以达到了单件模式的效果。目前我还没有想到静态类方式有什么致命的缺点，《Head First 设计模式》里只是讲JAVA中，在类的初始化比较复杂的情况下，静态类的方式可能有BUG。此外，静态类的方法属于类的单件，我们讲的单件模式，强调的是<strong>类只有一个实例</strong>，建议通常情况下使用实例的单件。  </p>
</li>
<li><p><strong>为什么不直接使用全局变量？</strong><br> 全局变量可以实现全局访问同一个实例，但不能保证只创建/只存在一个实例。此外，全局变量也没有做到延迟实例化。  </p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Patterns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解设计模式——工厂模式]]></title>
      <url>https://wenqihai.github.io/2017/03/13/Factory-Patterns/</url>
      <content type="html"><![CDATA[<p>设计模式算是一个古老的话题了，谈到OOP就不得不讲设计模式，通俗的讲，设计模式就是大量实践后总结出来的，利于构建松耦合、易扩展、高复用系统的编码套路。<br>本文介绍的是工厂模式，参考书是<a href="https://book.douban.com/subject/2243615/" target="_blank" rel="external">《Head First 设计模式》</a>，很好的一本书，看第一遍是在2年前，现在重新刷一遍，，总结一下。</p>
<h2 id="从简单工厂开始（Simple-Factory）"><a href="#从简单工厂开始（Simple-Factory）" class="headerlink" title="从简单工厂开始（Simple Factory）"></a>从简单工厂开始（Simple Factory）</h2><p>先上代码：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerStore</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">BuyComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span></div><div class="line">    &#123;</div><div class="line">        Computer pc = <span class="keyword">new</span> Computer();</div><div class="line">        <span class="keyword">if</span> (money &gt; <span class="number">6000</span>)</div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I7 6700K"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX970"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"Z170"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">money &gt; <span class="number">4000</span></span>)</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I5 6600K"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX960"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"B150"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I5 6500"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX950"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"B150"</span>;</div><div class="line">        &#125;</div><div class="line">        InstallOS(pc);</div><div class="line">        InstallApp(pc);</div><div class="line">        DoSomeTest(pc);</div><div class="line">        <span class="keyword">return</span> pc;</div><div class="line">    &#125;</div><div class="line">    InstallOS(Computer pc) &#123; ... &#125;</div><div class="line">    InstallApp(Computer pc) &#123; ... &#125;</div><div class="line">    DoSomeTest(Computer pc) &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们几乎可以自然而然的想到，把创建Computer对象及初始化的的代码给拿出来，因为由于配件价格的变动，装配方案是会经常调整的，比如现在Intel出了7代CPU，6000价位以上便可配I7 7700K了，我们把它改成一个有模有样的工厂：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerStore</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">BuyComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span></div><div class="line">    &#123;</div><div class="line">        Computer pc = AssembleComputer(money); <span class="comment">//把组装电脑的代码放到了一个单独的类里头</span></div><div class="line">        InstallOS(pc);</div><div class="line">        InstallApp(pc);</div><div class="line">        DoSomeTest(pc);</div><div class="line">        <span class="keyword">return</span> pc;</div><div class="line">    &#125;</div><div class="line">    InstallOS(Computer pc) &#123; ... &#125;</div><div class="line">    InstallApp(Computer pc) &#123; ... &#125;</div><div class="line">    DoSomeTest(Computer pc) &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerAssembleFactory</span> <span class="comment">//组装工厂，称之为组装间会合适点，这里只是为了有模有样</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AssembleComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span></div><div class="line">    &#123;</div><div class="line">        Computer pc = <span class="keyword">new</span> Computer();</div><div class="line">        <span class="keyword">if</span> (money &gt; <span class="number">6000</span>)</div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I7 6700K"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX970"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"Z170"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">money &gt; <span class="number">4000</span></span>)</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I5 6600K"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX960"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"B150"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I5 6500"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX950"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"B150"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以这样理解，ComputerStore的关注点在于电脑的销售，拿着价格单配置单面对客户就行了，至于这个价钱是买5代I7还是6代I7，还有零件的装配啥的，交给组装间就行了。<br>我们使用一个对象时，并不关心它是怎么造出来的，制造流程的变化，不应该影响我使用。简单工厂目的在于把类的构造及初始化的逻辑，封装到一起，让一个类<strong>只有一个被修改的理由</strong>。当然其实并不是非得某某Factory的才是工厂，像Encoding类的<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> encoding = Encoding.GetEncoding(<span class="string">"UTF8"</span>);</div></pre></td></tr></table></figure></p>
<p>,就是简单工厂的体现。</p>
<h2 id="抽象工厂模式（Factory-Method）"><a href="#抽象工厂模式（Factory-Method）" class="headerlink" title="抽象工厂模式（Factory Method）"></a>抽象工厂模式（Factory Method）</h2><p>简单工厂简单粗暴，代码写多了自然而然能够想得到，但是，简单工厂虽然能够更好的应对<strong>修改</strong>，却不足以应对<strong>扩展</strong>。<br>想象一下，我们要开另外一家电脑店，别的都一样，但是改用AMD的CPU。<br>既然是OO程序员，我们就不能简单粗暴的Copy一份代码，改一下类名，然后就改一下那一个方法。<br>研究一下可以发现，如果我们让所有的Factory都继承自同一个基类，基类实现一个AssembleComputer的抽象方法，这样ComputerStore便可使用各式各样的Factory了，更改如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerStore</span></div><div class="line">&#123;</div><div class="line">    AssembleFactory factory;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerStore</span>(<span class="params">AssembleFactory factory</span>) <span class="comment">//工厂从构造函数里头传入</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.factory=factory;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">BuyComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span></div><div class="line">    &#123;</div><div class="line">        Computer pc =factory.AssembleComputer(money); </div><div class="line">        InstallOS(pc);</div><div class="line">        InstallApp(pc);</div><div class="line">        DoSomeTest(pc);</div><div class="line">        <span class="keyword">return</span> pc;</div><div class="line">    &#125;</div><div class="line">    InstallOS(Computer pc) &#123; ... &#125;</div><div class="line">    InstallApp(Computer pc) &#123; ... &#125;</div><div class="line">    DoSomeTest(Computer pc) &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IntelComputerAssembleFactory</span> : <span class="title">AssembleFactory</span> <span class="comment">//专业组装Intel主机</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span>  Computer <span class="title">AssembleComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span></div><div class="line">    &#123;</div><div class="line">        Computer pc = <span class="keyword">new</span> Computer();</div><div class="line">        <span class="keyword">if</span> (money &gt; <span class="number">6000</span>)</div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I7 6700K"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX970"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"Z170"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">money &gt; <span class="number">4000</span></span>)</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I5 6600K"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX960"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"B150"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I5 6500"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX950"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"B150"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pc;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AMDComputerAssembleFactory</span> : <span class="title">AssembleFactory</span> <span class="comment">//专业组装AMD主机</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">AssembleComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span></div><div class="line">    &#123;</div><div class="line">        Computer pc = <span class="keyword">new</span> Computer();</div><div class="line">        <span class="keyword">if</span> (money &gt; <span class="number">6000</span>)</div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"AMD Ryzen 7 1700"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX970"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"XXX"</span>;<span class="comment">//AMD平台不熟悉。。</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">money &gt; <span class="number">4000</span></span>)</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"XXX"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX960"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"XXX"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"XXX"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX950"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"XXX"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pc;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AssembleFactory</span> <span class="comment">//不同工厂的基类，这样ComputerStore并不需要知道具体是哪一种工厂</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">AssembleComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，通过ComputerStore组合不同的Factory，就可以有不同的电脑店：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> intelFactory = <span class="keyword">new</span> IntelComputerAssembleFactory();</div><div class="line"><span class="keyword">var</span> intelComputerStore=<span class="keyword">new</span> ComputerStore(intelFactory);</div><div class="line"></div><div class="line"><span class="keyword">var</span> amdFactory = <span class="keyword">new</span> AMDComputerAssembleFactory();</div><div class="line"><span class="keyword">var</span> amdComputerStore=<span class="keyword">new</span> ComputerStore(amdFactory);</div></pre></td></tr></table></figure></p>
<p>任务完成，实现了扩展， ComputerStore的代码得到了复用。这就是传说中的抽象工厂模式，<strong>抽象工厂模式提供一个接口，用于创建相关的一个对象或者一组对象，而不需要明确指定具体类。</strong>  用户类（ComputerStore)只依赖抽象工厂类（AssembleFactory），并不依赖于具体的工厂类（IntelComputerAssembleFactory），符合OO设计原则：<strong>要依赖抽象，不要依赖具体类。</strong>  </p>
<h2 id="工厂方法模式（Abstract-Factory）"><a href="#工厂方法模式（Abstract-Factory）" class="headerlink" title="工厂方法模式（Abstract Factory）"></a>工厂方法模式（Abstract Factory）</h2><p>上面的代码我们还能改得优雅一些：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ComputerStore</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">BuyComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span></div><div class="line">    &#123;</div><div class="line">        Computer pc = AssembleComputer(money); </div><div class="line">        InstallOS(pc);</div><div class="line">        InstallApp(pc);</div><div class="line">        DoSomeTest(pc);</div><div class="line">        <span class="keyword">return</span> pc;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">AssembleComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span>; <span class="comment">//原来工厂类基类里的方法，现在放到了ComputerStore类里作为一个抽象方法留给子类实现</span></div><div class="line">    </div><div class="line">    InstallOS(Computer pc) &#123; ... &#125;</div><div class="line">    InstallApp(Computer pc) &#123; ... &#125;</div><div class="line">    DoSomeTest(Computer pc) &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IntelComputerStore</span> : <span class="title">ComputerStore</span> <span class="comment">//Intel电脑店，实现了自己的AssembleComputer方法</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Computer <span class="title">AssembleComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span></div><div class="line">    &#123;</div><div class="line">        Computer pc = <span class="keyword">new</span> Computer();</div><div class="line">        <span class="keyword">if</span> (money &gt; <span class="number">6000</span>)</div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I7 6700K"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX970"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"Z170"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">money &gt; <span class="number">4000</span></span>)</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I5 6600K"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX960"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"B150"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"I5 6500"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX950"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"B150"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pc;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AMDComputerStore</span> : <span class="title">ComputerStore</span> <span class="comment">//AMD电脑店，实现了自己的AssembleComputer方法</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">AssembleComputer</span>(<span class="params"><span class="keyword">double</span> money</span>)</span></div><div class="line">    &#123;</div><div class="line">        Computer pc = <span class="keyword">new</span> Computer();</div><div class="line">        <span class="keyword">if</span> (money &gt; <span class="number">6000</span>)</div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"AMD Ryzen 7 1700"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX970"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"XXX"</span>;<span class="comment">//AMD平台不熟悉。。</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">money &gt; <span class="number">4000</span></span>)</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"XXX"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX960"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"XXX"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            pc = <span class="keyword">new</span> Computer();</div><div class="line">            pc.CPU = <span class="string">"XXX"</span>;</div><div class="line">            pc.GPU = <span class="string">"GTX950"</span>;</div><div class="line">            pc.Mainboard = <span class="string">"XXX"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样是不是优雅很多了呢，我们看不到乱七八糟的Factory了，Intel电脑店对应IntelComputerStore，AMD电脑店对应AMDComputerStore,相当自然，效果还是一样的，ComputerStore里的代码得到了复用，所有的修改和扩展都只需要修改ComputerStore的子类。<br><strong>工厂方法模式定义了一个创建对象的接口，留给子类实现，把对象的实例化推迟到了子类。</strong><br>其实抽象工厂模式中，抽象工厂的具体实现，就相当于工厂方法模式，父类定义创建的接口，子类定义具体实现。不过抽象工厂可以有一组创建对象的接口，这些对象都是相关的，工厂方法则没有这个效果。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>《Head First 设计模式》里花了很大的篇幅讲解工厂模式，例子、插图、疑难解答等，概括地说，简单工厂封装了创建对象的代码以应对修改；抽象工厂模式定义了创建对象的接口，让使用对象的逻辑和具体对象以及创建对象的逻辑解耦（<strong>依赖倒置原则</strong>）；工厂方法模式定义接口，将对象的创建交给子类。抽象工厂模式通过组合来实现复用，工厂方法模式则是通过继承来实现。  .NET Framework中也有不少工厂模式范例，比如WebRequest类（工厂方法），DbProviderFactory（抽象工厂）等，这里就不详细讨论了。</p>
<p>本文的例子可能不是太好，这只是我自己的理解，仅供参考。</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Patterns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown学习笔记]]></title>
      <url>https://wenqihai.github.io/2017/03/11/Markdown/</url>
      <content type="html"><![CDATA[<p>&ensp;&ensp;弄好GitHub Pages后做的第一件事是学习 <strong>Markdown</strong> 的用法，现学现用，记录一下常用语法。<br>参考自<a href="http://www.markdown-tutorial.com/#/" target="_blank" rel="external">markdown-tutorial</a></p>
<h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><ul>
<li><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></li>
<li><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></li>
<li><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3></li>
<li><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><blockquote>
<ul>
<li># 一级标题</li>
<li>## 二级标题</li>
<li>### 三级标题</li>
<li>#### 四级标题</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="Italics-and-Bold"><a href="#Italics-and-Bold" class="headerlink" title="Italics and Bold"></a>Italics and Bold</h2><ul>
<li><em>Italics</em> <em>Italics</em></li>
<li><strong>Bold</strong>  <strong>Bold</strong><blockquote>
<ul>
<li>*Italics* _Italics_</li>
<li>**Bold** __Bold__</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="links"><a href="#links" class="headerlink" title="links"></a>links</h2><p><a href="https://wenqihai.github.io">Vachel’s belog</a></p>
<blockquote>
<p>[Vachel’s belog](<a href="https://wenqihai.github.io">https://wenqihai.github.io</a>)</p>
</blockquote>
<h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p><img src="https://github.com/fluidicon.png" alt="GitHub"></p>
<blockquote>
<p>![GitHub](<a href="https://github.com/fluidicon.png" target="_blank" rel="external">https://github.com/fluidicon.png</a>)</p>
</blockquote>
<h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><blockquote>
<p>“Hello world,hello everyone!”<br>>“Hello world,hello everyone!”</p>
<h1 id="Unordered-Lists"><a href="#Unordered-Lists" class="headerlink" title="Unordered Lists"></a>Unordered Lists</h1><ul>
<li>Monday</li>
<li>Tuesday</li>
<li>Wednesday</li>
<li>Thursday </li>
</ul>
<p>* Monday<br>* Tuesday<br>* Wednesday<br>* Thursday </p>
</blockquote>
<h2 id="Ordered-Lists"><a href="#Ordered-Lists" class="headerlink" title="Ordered Lists"></a>Ordered Lists</h2><ol>
<li>Friday</li>
<li>Saturday</li>
<li>Sunday</li>
</ol>
<blockquote>
<p>1. Friday<br>2. Saturday<br>3. Sunday  </p>
</blockquote>
<h2 id="Nested-Lists"><a href="#Nested-Lists" class="headerlink" title="Nested Lists"></a>Nested Lists</h2><ul>
<li>Weekdays<ul>
<li><ul>
<li>Monday</li>
</ul>
</li>
<li><ul>
<li>Tuesday</li>
</ul>
</li>
<li><ul>
<li>Wednesday </li>
</ul>
</li>
<li><ul>
<li>Thursday</li>
</ul>
</li>
<li><ul>
<li>Saturday</li>
</ul>
</li>
</ul>
</li>
<li>Weekend<ul>
<li><ul>
<li>Saturday</li>
</ul>
</li>
<li><ul>
<li>Sunday</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>* Weekdays<br> &ensp;+ <em> Monday<br> &ensp;+ </em> Tuesday<br> &ensp;+ <em> Wednesday<br> &ensp;+ </em> Thursday<br> &ensp;+ <em> Saturday<br> \</em> Weekend<br> &ensp;+ <em> Saturday<br> &ensp;+ </em> Sunday  </p>
</blockquote>
<h2 id="Paragraphs"><a href="#Paragraphs" class="headerlink" title="Paragraphs"></a>Paragraphs</h2><p>Where there is life,there is hope.<br>Can you can a can as a can canner can can a can?  </p>
<blockquote>
<p>Where there is life,there is hope.<br>Can you can a can as a can canner can can a can?  (two space after .)</p>
</blockquote>
<h2 id="Code-Spans"><a href="#Code-Spans" class="headerlink" title="Code Spans"></a>Code Spans</h2><p><code>printf(&quot;Hello World!&quot;)</code></p>
<blockquote>
<p>`printf(“Hello World!”)`</p>
</blockquote>
<h2 id="Code-Blocks"><a href="#Code-Blocks" class="headerlink" title="Code Blocks"></a>Code Blocks</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Program</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Cosole.WriteLine(<span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>```<br>codes<br>```</p>
</blockquote>
<h2 id="Escape-Characters"><a href="#Escape-Characters" class="headerlink" title="Escape Characters"></a>Escape Characters</h2><p>#</p>
<blockquote>
<p>\#</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello GitHub Pages!]]></title>
      <url>https://wenqihai.github.io/2017/03/10/Hello%20GitHub%20Pages/</url>
      <content type="html"><![CDATA[<p>花了好几个小时，整好了GitHub Pages + Hexo+Pln主题。北京时间2017年3月10日21点03分，GitHub上的博客生涯正式开始，Mark一下。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
  
  
    
  
</search>
